version: "3.9"

services:
  service-registry:
    container_name: service-registry
    build:
      context: service_registry/
      dockerfile: Dockerfile
    image: service-registry
    networks:
        - spring-cloud-network
    ports:
      - 8761:8761  
    healthcheck:
      test: curl --fail -s http://localhost:8761/ || exit 1 
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s

  load-balancer:
    container_name: load-balancer
    build:
      context: load-balancer/
      dockerfile: Dockerfile
    image: load-balancer:latest
    environment:
      - "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka"
      - "SPRING_PROFILES_ACTIVE=eureka"
    ports:
      - 8888:8888
    networks:
      - spring-cloud-network
    depends_on:
      service-registry:
         condition: service_healthy

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'productsdb'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'root'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - my-db:/var/lib/mysql
    networks:
        - spring-cloud-network

  microservice1:
    build:
      context: shoppingApp/
      dockerfile: Dockerfile
    command: bash -c "python shoppingApp/manage.py makemigrations && python shoppingApp/manage.py migrate && python shoppingApp/manage.py createsuperuser && python shoppingApp/manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/ProductCatCode
    ports:
      - "8000:8000"
    networks:
      - spring-cloud-network
    depends_on:
      - db

  sidecar-product-catalog:
    container_name: sidecar-product-catalog
    build:
      context: sidecar/
      dockerfile: Dockerfile
    image: sidecar-product-catalog
    environment:
      - "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka"
      - "SPRING_PROFILES_ACTIVE=eureka"
      - "SIDECAR_HEALTHURI=http://microservice1:8000/health.json"
      - "SIDECAR_HOSTNAME=microservice1"
    ports:
      - 5678:5678
    networks:
        - spring-cloud-network
    depends_on:
      service-registry:
         condition: service_healthy

  microservice2:
    build:
      context: shoppingApp/
      dockerfile: Dockerfile
    command: bash -c "python shoppingApp/manage.py makemigrations && python shoppingApp/manage.py migrate && python shoppingApp/manage.py createsuperuser && python shoppingApp/manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/ProductCatCode
    ports:
      - "8001:8000"
    networks:
      - spring-cloud-network
    depends_on:
      - db

  sidecar-product-catalog2:
    container_name: sidecar-product-catalog2
    build:
      context: sidecar/
      dockerfile: Dockerfile
    image: sidecar-product-catalog
    environment:
      - "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka"
      - "SPRING_PROFILES_ACTIVE=eureka"
      - "SIDECAR_HEALTHURI=http://microservice2:8000/health.json"
      - "SIDECAR_HOSTNAME=microservice2"
    ports:
      - 5679:5678
    networks:
        - spring-cloud-network
    depends_on:
      service-registry:
         condition: service_healthy

  api-gw:
     container_name: api-gw
     build:
        context: apigw/
        dockerfile: Dockerfile
     image: api-gw
     environment:
      - "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka"
      - "SPRING_PROFILES_ACTIVE=eureka"
     ports:
        - 8080:8080
     networks:
        - spring-cloud-network
     depends_on:
        service-registry:
          condition: service_healthy

  fe:
     container_name: fe
     build:
        context: shopping_app_fe/
        dockerfile: Dockerfile
     volumes:
        - '.:/shopping_app_fe/app'
        - '/shopping_app_fe/app/node_modules'
     ports:
        - 3001:3000
     environment:
        - CHOKIDAR_USEPOLLING=true
     networks:
        - spring-cloud-network

volumes:
  my-db:

networks:
    spring-cloud-network:
        driver: bridge
